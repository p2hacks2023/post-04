// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Achievement is an object representing the database table.
type Achievement struct {
	ID          string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	DisplayName string `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Description string `boil:"description" json:"description" toml:"description" yaml:"description"`
	CategoryID  string `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`

	R *achievementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L achievementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AchievementColumns = struct {
	ID          string
	Name        string
	DisplayName string
	Description string
	CategoryID  string
}{
	ID:          "id",
	Name:        "name",
	DisplayName: "display_name",
	Description: "description",
	CategoryID:  "category_id",
}

var AchievementTableColumns = struct {
	ID          string
	Name        string
	DisplayName string
	Description string
	CategoryID  string
}{
	ID:          "achievements.id",
	Name:        "achievements.name",
	DisplayName: "achievements.display_name",
	Description: "achievements.description",
	CategoryID:  "achievements.category_id",
}

// Generated where

var AchievementWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	DisplayName whereHelperstring
	Description whereHelperstring
	CategoryID  whereHelperstring
}{
	ID:          whereHelperstring{field: "\"chilly_daze\".\"achievements\".\"id\""},
	Name:        whereHelperstring{field: "\"chilly_daze\".\"achievements\".\"name\""},
	DisplayName: whereHelperstring{field: "\"chilly_daze\".\"achievements\".\"display_name\""},
	Description: whereHelperstring{field: "\"chilly_daze\".\"achievements\".\"description\""},
	CategoryID:  whereHelperstring{field: "\"chilly_daze\".\"achievements\".\"category_id\""},
}

// AchievementRels is where relationship names are stored.
var AchievementRels = struct {
	Category          string
	ChillAchievements string
	UserAchievements  string
	AvatarUsers       string
}{
	Category:          "Category",
	ChillAchievements: "ChillAchievements",
	UserAchievements:  "UserAchievements",
	AvatarUsers:       "AvatarUsers",
}

// achievementR is where relationships are stored.
type achievementR struct {
	Category          *AchievementCategory  `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	ChillAchievements ChillAchievementSlice `boil:"ChillAchievements" json:"ChillAchievements" toml:"ChillAchievements" yaml:"ChillAchievements"`
	UserAchievements  UserAchievementSlice  `boil:"UserAchievements" json:"UserAchievements" toml:"UserAchievements" yaml:"UserAchievements"`
	AvatarUsers       UserSlice             `boil:"AvatarUsers" json:"AvatarUsers" toml:"AvatarUsers" yaml:"AvatarUsers"`
}

// NewStruct creates a new relationship struct
func (*achievementR) NewStruct() *achievementR {
	return &achievementR{}
}

func (r *achievementR) GetCategory() *AchievementCategory {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *achievementR) GetChillAchievements() ChillAchievementSlice {
	if r == nil {
		return nil
	}
	return r.ChillAchievements
}

func (r *achievementR) GetUserAchievements() UserAchievementSlice {
	if r == nil {
		return nil
	}
	return r.UserAchievements
}

func (r *achievementR) GetAvatarUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.AvatarUsers
}

// achievementL is where Load methods for each relationship are stored.
type achievementL struct{}

var (
	achievementAllColumns            = []string{"id", "name", "display_name", "description", "category_id"}
	achievementColumnsWithoutDefault = []string{"name", "display_name", "description", "category_id"}
	achievementColumnsWithDefault    = []string{"id"}
	achievementPrimaryKeyColumns     = []string{"id"}
	achievementGeneratedColumns      = []string{}
)

type (
	// AchievementSlice is an alias for a slice of pointers to Achievement.
	// This should almost always be used instead of []Achievement.
	AchievementSlice []*Achievement
	// AchievementHook is the signature for custom Achievement hook methods
	AchievementHook func(context.Context, boil.ContextExecutor, *Achievement) error

	achievementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	achievementType                 = reflect.TypeOf(&Achievement{})
	achievementMapping              = queries.MakeStructMapping(achievementType)
	achievementPrimaryKeyMapping, _ = queries.BindMapping(achievementType, achievementMapping, achievementPrimaryKeyColumns)
	achievementInsertCacheMut       sync.RWMutex
	achievementInsertCache          = make(map[string]insertCache)
	achievementUpdateCacheMut       sync.RWMutex
	achievementUpdateCache          = make(map[string]updateCache)
	achievementUpsertCacheMut       sync.RWMutex
	achievementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var achievementAfterSelectHooks []AchievementHook

var achievementBeforeInsertHooks []AchievementHook
var achievementAfterInsertHooks []AchievementHook

var achievementBeforeUpdateHooks []AchievementHook
var achievementAfterUpdateHooks []AchievementHook

var achievementBeforeDeleteHooks []AchievementHook
var achievementAfterDeleteHooks []AchievementHook

var achievementBeforeUpsertHooks []AchievementHook
var achievementAfterUpsertHooks []AchievementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Achievement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Achievement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Achievement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Achievement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Achievement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Achievement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Achievement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Achievement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Achievement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAchievementHook registers your hook function for all future operations.
func AddAchievementHook(hookPoint boil.HookPoint, achievementHook AchievementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		achievementAfterSelectHooks = append(achievementAfterSelectHooks, achievementHook)
	case boil.BeforeInsertHook:
		achievementBeforeInsertHooks = append(achievementBeforeInsertHooks, achievementHook)
	case boil.AfterInsertHook:
		achievementAfterInsertHooks = append(achievementAfterInsertHooks, achievementHook)
	case boil.BeforeUpdateHook:
		achievementBeforeUpdateHooks = append(achievementBeforeUpdateHooks, achievementHook)
	case boil.AfterUpdateHook:
		achievementAfterUpdateHooks = append(achievementAfterUpdateHooks, achievementHook)
	case boil.BeforeDeleteHook:
		achievementBeforeDeleteHooks = append(achievementBeforeDeleteHooks, achievementHook)
	case boil.AfterDeleteHook:
		achievementAfterDeleteHooks = append(achievementAfterDeleteHooks, achievementHook)
	case boil.BeforeUpsertHook:
		achievementBeforeUpsertHooks = append(achievementBeforeUpsertHooks, achievementHook)
	case boil.AfterUpsertHook:
		achievementAfterUpsertHooks = append(achievementAfterUpsertHooks, achievementHook)
	}
}

// One returns a single achievement record from the query.
func (q achievementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Achievement, error) {
	o := &Achievement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for achievements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Achievement records from the query.
func (q achievementQuery) All(ctx context.Context, exec boil.ContextExecutor) (AchievementSlice, error) {
	var o []*Achievement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Achievement slice")
	}

	if len(achievementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Achievement records in the query.
func (q achievementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count achievements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q achievementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if achievements exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Achievement) Category(mods ...qm.QueryMod) achievementCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return AchievementCategories(queryMods...)
}

// ChillAchievements retrieves all the chill_achievement's ChillAchievements with an executor.
func (o *Achievement) ChillAchievements(mods ...qm.QueryMod) chillAchievementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"chill_achievements\".\"achievement_id\"=?", o.ID),
	)

	return ChillAchievements(queryMods...)
}

// UserAchievements retrieves all the user_achievement's UserAchievements with an executor.
func (o *Achievement) UserAchievements(mods ...qm.QueryMod) userAchievementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"user_achievements\".\"achievement_id\"=?", o.ID),
	)

	return UserAchievements(queryMods...)
}

// AvatarUsers retrieves all the user's Users with an executor via avatar column.
func (o *Achievement) AvatarUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"users\".\"avatar\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (achievementL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievement interface{}, mods queries.Applicator) error {
	var slice []*Achievement
	var object *Achievement

	if singular {
		var ok bool
		object, ok = maybeAchievement.(*Achievement)
		if !ok {
			object = new(Achievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAchievement))
			}
		}
	} else {
		s, ok := maybeAchievement.(*[]*Achievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAchievement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.achievement_categories`),
		qm.WhereIn(`chilly_daze.achievement_categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AchievementCategory")
	}

	var resultSlice []*AchievementCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AchievementCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for achievement_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for achievement_categories")
	}

	if len(achievementCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &achievementCategoryR{}
		}
		foreign.R.CategoryAchievements = append(foreign.R.CategoryAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &achievementCategoryR{}
				}
				foreign.R.CategoryAchievements = append(foreign.R.CategoryAchievements, local)
				break
			}
		}
	}

	return nil
}

// LoadChillAchievements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (achievementL) LoadChillAchievements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievement interface{}, mods queries.Applicator) error {
	var slice []*Achievement
	var object *Achievement

	if singular {
		var ok bool
		object, ok = maybeAchievement.(*Achievement)
		if !ok {
			object = new(Achievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAchievement))
			}
		}
	} else {
		s, ok := maybeAchievement.(*[]*Achievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAchievement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.chill_achievements`),
		qm.WhereIn(`chilly_daze.chill_achievements.achievement_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chill_achievements")
	}

	var resultSlice []*ChillAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chill_achievements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chill_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chill_achievements")
	}

	if len(chillAchievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChillAchievements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chillAchievementR{}
			}
			foreign.R.Achievement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AchievementID {
				local.R.ChillAchievements = append(local.R.ChillAchievements, foreign)
				if foreign.R == nil {
					foreign.R = &chillAchievementR{}
				}
				foreign.R.Achievement = local
				break
			}
		}
	}

	return nil
}

// LoadUserAchievements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (achievementL) LoadUserAchievements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievement interface{}, mods queries.Applicator) error {
	var slice []*Achievement
	var object *Achievement

	if singular {
		var ok bool
		object, ok = maybeAchievement.(*Achievement)
		if !ok {
			object = new(Achievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAchievement))
			}
		}
	} else {
		s, ok := maybeAchievement.(*[]*Achievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAchievement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.user_achievements`),
		qm.WhereIn(`chilly_daze.user_achievements.achievement_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_achievements")
	}

	var resultSlice []*UserAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_achievements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_achievements")
	}

	if len(userAchievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAchievements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAchievementR{}
			}
			foreign.R.Achievement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AchievementID {
				local.R.UserAchievements = append(local.R.UserAchievements, foreign)
				if foreign.R == nil {
					foreign.R = &userAchievementR{}
				}
				foreign.R.Achievement = local
				break
			}
		}
	}

	return nil
}

// LoadAvatarUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (achievementL) LoadAvatarUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievement interface{}, mods queries.Applicator) error {
	var slice []*Achievement
	var object *Achievement

	if singular {
		var ok bool
		object, ok = maybeAchievement.(*Achievement)
		if !ok {
			object = new(Achievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAchievement))
			}
		}
	} else {
		s, ok := maybeAchievement.(*[]*Achievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAchievement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.users`),
		qm.WhereIn(`chilly_daze.users.avatar in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AvatarUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.AvatarAchievement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Avatar) {
				local.R.AvatarUsers = append(local.R.AvatarUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AvatarAchievement = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the achievement to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryAchievements.
func (o *Achievement) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AchievementCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chilly_daze\".\"achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, achievementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &achievementR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &achievementCategoryR{
			CategoryAchievements: AchievementSlice{o},
		}
	} else {
		related.R.CategoryAchievements = append(related.R.CategoryAchievements, o)
	}

	return nil
}

// AddChillAchievements adds the given related objects to the existing relationships
// of the achievement, optionally inserting them as new records.
// Appends related to o.R.ChillAchievements.
// Sets related.R.Achievement appropriately.
func (o *Achievement) AddChillAchievements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChillAchievement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AchievementID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"chill_achievements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"achievement_id"}),
				strmangle.WhereClause("\"", "\"", 2, chillAchievementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AchievementID = o.ID
		}
	}

	if o.R == nil {
		o.R = &achievementR{
			ChillAchievements: related,
		}
	} else {
		o.R.ChillAchievements = append(o.R.ChillAchievements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chillAchievementR{
				Achievement: o,
			}
		} else {
			rel.R.Achievement = o
		}
	}
	return nil
}

// AddUserAchievements adds the given related objects to the existing relationships
// of the achievement, optionally inserting them as new records.
// Appends related to o.R.UserAchievements.
// Sets related.R.Achievement appropriately.
func (o *Achievement) AddUserAchievements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAchievement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AchievementID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"user_achievements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"achievement_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAchievementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AchievementID = o.ID
		}
	}

	if o.R == nil {
		o.R = &achievementR{
			UserAchievements: related,
		}
	} else {
		o.R.UserAchievements = append(o.R.UserAchievements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAchievementR{
				Achievement: o,
			}
		} else {
			rel.R.Achievement = o
		}
	}
	return nil
}

// AddAvatarUsers adds the given related objects to the existing relationships
// of the achievement, optionally inserting them as new records.
// Appends related to o.R.AvatarUsers.
// Sets related.R.AvatarAchievement appropriately.
func (o *Achievement) AddAvatarUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Avatar, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"avatar"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Avatar, o.ID)
		}
	}

	if o.R == nil {
		o.R = &achievementR{
			AvatarUsers: related,
		}
	} else {
		o.R.AvatarUsers = append(o.R.AvatarUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				AvatarAchievement: o,
			}
		} else {
			rel.R.AvatarAchievement = o
		}
	}
	return nil
}

// SetAvatarUsers removes all previously related items of the
// achievement replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AvatarAchievement's AvatarUsers accordingly.
// Replaces o.R.AvatarUsers with related.
// Sets related.R.AvatarAchievement's AvatarUsers accordingly.
func (o *Achievement) SetAvatarUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"chilly_daze\".\"users\" set \"avatar\" = null where \"avatar\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AvatarUsers {
			queries.SetScanner(&rel.Avatar, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AvatarAchievement = nil
		}
		o.R.AvatarUsers = nil
	}

	return o.AddAvatarUsers(ctx, exec, insert, related...)
}

// RemoveAvatarUsers relationships from objects passed in.
// Removes related items from R.AvatarUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AvatarAchievement.
func (o *Achievement) RemoveAvatarUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Avatar, nil)
		if rel.R != nil {
			rel.R.AvatarAchievement = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("avatar")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AvatarUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.AvatarUsers)
			if ln > 1 && i < ln-1 {
				o.R.AvatarUsers[i] = o.R.AvatarUsers[ln-1]
			}
			o.R.AvatarUsers = o.R.AvatarUsers[:ln-1]
			break
		}
	}

	return nil
}

// Achievements retrieves all the records using an executor.
func Achievements(mods ...qm.QueryMod) achievementQuery {
	mods = append(mods, qm.From("\"chilly_daze\".\"achievements\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chilly_daze\".\"achievements\".*"})
	}

	return achievementQuery{q}
}

// FindAchievement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAchievement(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Achievement, error) {
	achievementObj := &Achievement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chilly_daze\".\"achievements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, achievementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from achievements")
	}

	if err = achievementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return achievementObj, err
	}

	return achievementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Achievement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no achievements provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(achievementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	achievementInsertCacheMut.RLock()
	cache, cached := achievementInsertCache[key]
	achievementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			achievementAllColumns,
			achievementColumnsWithDefault,
			achievementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(achievementType, achievementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(achievementType, achievementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chilly_daze\".\"achievements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chilly_daze\".\"achievements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into achievements")
	}

	if !cached {
		achievementInsertCacheMut.Lock()
		achievementInsertCache[key] = cache
		achievementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Achievement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Achievement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	achievementUpdateCacheMut.RLock()
	cache, cached := achievementUpdateCache[key]
	achievementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			achievementAllColumns,
			achievementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update achievements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chilly_daze\".\"achievements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, achievementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(achievementType, achievementMapping, append(wl, achievementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update achievements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for achievements")
	}

	if !cached {
		achievementUpdateCacheMut.Lock()
		achievementUpdateCache[key] = cache
		achievementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q achievementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for achievements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AchievementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chilly_daze\".\"achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, achievementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in achievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all achievement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Achievement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no achievements provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(achievementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	achievementUpsertCacheMut.RLock()
	cache, cached := achievementUpsertCache[key]
	achievementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			achievementAllColumns,
			achievementColumnsWithDefault,
			achievementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			achievementAllColumns,
			achievementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert achievements, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(achievementPrimaryKeyColumns))
			copy(conflict, achievementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chilly_daze\".\"achievements\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(achievementType, achievementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(achievementType, achievementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert achievements")
	}

	if !cached {
		achievementUpsertCacheMut.Lock()
		achievementUpsertCache[key] = cache
		achievementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Achievement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Achievement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Achievement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), achievementPrimaryKeyMapping)
	sql := "DELETE FROM \"chilly_daze\".\"achievements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for achievements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q achievementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no achievementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for achievements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AchievementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(achievementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chilly_daze\".\"achievements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, achievementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from achievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for achievements")
	}

	if len(achievementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Achievement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAchievement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AchievementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AchievementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chilly_daze\".\"achievements\".* FROM \"chilly_daze\".\"achievements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, achievementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in AchievementSlice")
	}

	*o = slice

	return nil
}

// AchievementExists checks if the Achievement row exists.
func AchievementExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chilly_daze\".\"achievements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if achievements exists")
	}

	return exists, nil
}

// Exists checks if the Achievement row exists.
func (o *Achievement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AchievementExists(ctx, exec, o.ID)
}
