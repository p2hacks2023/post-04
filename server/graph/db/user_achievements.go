// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAchievement is an object representing the database table.
type UserAchievement struct {
	ID            string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID        string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AchievementID string `boil:"achievement_id" json:"achievement_id" toml:"achievement_id" yaml:"achievement_id"`

	R *userAchievementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAchievementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAchievementColumns = struct {
	ID            string
	UserID        string
	AchievementID string
}{
	ID:            "id",
	UserID:        "user_id",
	AchievementID: "achievement_id",
}

var UserAchievementTableColumns = struct {
	ID            string
	UserID        string
	AchievementID string
}{
	ID:            "user_achievements.id",
	UserID:        "user_achievements.user_id",
	AchievementID: "user_achievements.achievement_id",
}

// Generated where

var UserAchievementWhere = struct {
	ID            whereHelperstring
	UserID        whereHelperstring
	AchievementID whereHelperstring
}{
	ID:            whereHelperstring{field: "\"chilly_daze\".\"user_achievements\".\"id\""},
	UserID:        whereHelperstring{field: "\"chilly_daze\".\"user_achievements\".\"user_id\""},
	AchievementID: whereHelperstring{field: "\"chilly_daze\".\"user_achievements\".\"achievement_id\""},
}

// UserAchievementRels is where relationship names are stored.
var UserAchievementRels = struct {
	Achievement string
	User        string
}{
	Achievement: "Achievement",
	User:        "User",
}

// userAchievementR is where relationships are stored.
type userAchievementR struct {
	Achievement *Achievement `boil:"Achievement" json:"Achievement" toml:"Achievement" yaml:"Achievement"`
	User        *User        `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userAchievementR) NewStruct() *userAchievementR {
	return &userAchievementR{}
}

func (r *userAchievementR) GetAchievement() *Achievement {
	if r == nil {
		return nil
	}
	return r.Achievement
}

func (r *userAchievementR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userAchievementL is where Load methods for each relationship are stored.
type userAchievementL struct{}

var (
	userAchievementAllColumns            = []string{"id", "user_id", "achievement_id"}
	userAchievementColumnsWithoutDefault = []string{"user_id", "achievement_id"}
	userAchievementColumnsWithDefault    = []string{"id"}
	userAchievementPrimaryKeyColumns     = []string{"id"}
	userAchievementGeneratedColumns      = []string{}
)

type (
	// UserAchievementSlice is an alias for a slice of pointers to UserAchievement.
	// This should almost always be used instead of []UserAchievement.
	UserAchievementSlice []*UserAchievement
	// UserAchievementHook is the signature for custom UserAchievement hook methods
	UserAchievementHook func(context.Context, boil.ContextExecutor, *UserAchievement) error

	userAchievementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAchievementType                 = reflect.TypeOf(&UserAchievement{})
	userAchievementMapping              = queries.MakeStructMapping(userAchievementType)
	userAchievementPrimaryKeyMapping, _ = queries.BindMapping(userAchievementType, userAchievementMapping, userAchievementPrimaryKeyColumns)
	userAchievementInsertCacheMut       sync.RWMutex
	userAchievementInsertCache          = make(map[string]insertCache)
	userAchievementUpdateCacheMut       sync.RWMutex
	userAchievementUpdateCache          = make(map[string]updateCache)
	userAchievementUpsertCacheMut       sync.RWMutex
	userAchievementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAchievementAfterSelectHooks []UserAchievementHook

var userAchievementBeforeInsertHooks []UserAchievementHook
var userAchievementAfterInsertHooks []UserAchievementHook

var userAchievementBeforeUpdateHooks []UserAchievementHook
var userAchievementAfterUpdateHooks []UserAchievementHook

var userAchievementBeforeDeleteHooks []UserAchievementHook
var userAchievementAfterDeleteHooks []UserAchievementHook

var userAchievementBeforeUpsertHooks []UserAchievementHook
var userAchievementAfterUpsertHooks []UserAchievementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAchievement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAchievement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAchievement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAchievement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAchievement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAchievement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAchievement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAchievement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAchievement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAchievementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAchievementHook registers your hook function for all future operations.
func AddUserAchievementHook(hookPoint boil.HookPoint, userAchievementHook UserAchievementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAchievementAfterSelectHooks = append(userAchievementAfterSelectHooks, userAchievementHook)
	case boil.BeforeInsertHook:
		userAchievementBeforeInsertHooks = append(userAchievementBeforeInsertHooks, userAchievementHook)
	case boil.AfterInsertHook:
		userAchievementAfterInsertHooks = append(userAchievementAfterInsertHooks, userAchievementHook)
	case boil.BeforeUpdateHook:
		userAchievementBeforeUpdateHooks = append(userAchievementBeforeUpdateHooks, userAchievementHook)
	case boil.AfterUpdateHook:
		userAchievementAfterUpdateHooks = append(userAchievementAfterUpdateHooks, userAchievementHook)
	case boil.BeforeDeleteHook:
		userAchievementBeforeDeleteHooks = append(userAchievementBeforeDeleteHooks, userAchievementHook)
	case boil.AfterDeleteHook:
		userAchievementAfterDeleteHooks = append(userAchievementAfterDeleteHooks, userAchievementHook)
	case boil.BeforeUpsertHook:
		userAchievementBeforeUpsertHooks = append(userAchievementBeforeUpsertHooks, userAchievementHook)
	case boil.AfterUpsertHook:
		userAchievementAfterUpsertHooks = append(userAchievementAfterUpsertHooks, userAchievementHook)
	}
}

// One returns a single userAchievement record from the query.
func (q userAchievementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAchievement, error) {
	o := &UserAchievement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for user_achievements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAchievement records from the query.
func (q userAchievementQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAchievementSlice, error) {
	var o []*UserAchievement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to UserAchievement slice")
	}

	if len(userAchievementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAchievement records in the query.
func (q userAchievementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count user_achievements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAchievementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if user_achievements exists")
	}

	return count > 0, nil
}

// Achievement pointed to by the foreign key.
func (o *UserAchievement) Achievement(mods ...qm.QueryMod) achievementQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AchievementID),
	}

	queryMods = append(queryMods, mods...)

	return Achievements(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserAchievement) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadAchievement allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAchievementL) LoadAchievement(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAchievement interface{}, mods queries.Applicator) error {
	var slice []*UserAchievement
	var object *UserAchievement

	if singular {
		var ok bool
		object, ok = maybeUserAchievement.(*UserAchievement)
		if !ok {
			object = new(UserAchievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAchievement))
			}
		}
	} else {
		s, ok := maybeUserAchievement.(*[]*UserAchievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAchievement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAchievementR{}
		}
		args = append(args, object.AchievementID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAchievementR{}
			}

			for _, a := range args {
				if a == obj.AchievementID {
					continue Outer
				}
			}

			args = append(args, obj.AchievementID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.achievements`),
		qm.WhereIn(`chilly_daze.achievements.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Achievement")
	}

	var resultSlice []*Achievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Achievement")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for achievements")
	}

	if len(achievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Achievement = foreign
		if foreign.R == nil {
			foreign.R = &achievementR{}
		}
		foreign.R.UserAchievements = append(foreign.R.UserAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AchievementID == foreign.ID {
				local.R.Achievement = foreign
				if foreign.R == nil {
					foreign.R = &achievementR{}
				}
				foreign.R.UserAchievements = append(foreign.R.UserAchievements, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAchievementL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAchievement interface{}, mods queries.Applicator) error {
	var slice []*UserAchievement
	var object *UserAchievement

	if singular {
		var ok bool
		object, ok = maybeUserAchievement.(*UserAchievement)
		if !ok {
			object = new(UserAchievement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAchievement))
			}
		}
	} else {
		s, ok := maybeUserAchievement.(*[]*UserAchievement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAchievement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAchievement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAchievementR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAchievementR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.users`),
		qm.WhereIn(`chilly_daze.users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserAchievements = append(foreign.R.UserAchievements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserAchievements = append(foreign.R.UserAchievements, local)
				break
			}
		}
	}

	return nil
}

// SetAchievement of the userAchievement to the related item.
// Sets o.R.Achievement to related.
// Adds o to related.R.UserAchievements.
func (o *UserAchievement) SetAchievement(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Achievement) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chilly_daze\".\"user_achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"achievement_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAchievementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AchievementID = related.ID
	if o.R == nil {
		o.R = &userAchievementR{
			Achievement: related,
		}
	} else {
		o.R.Achievement = related
	}

	if related.R == nil {
		related.R = &achievementR{
			UserAchievements: UserAchievementSlice{o},
		}
	} else {
		related.R.UserAchievements = append(related.R.UserAchievements, o)
	}

	return nil
}

// SetUser of the userAchievement to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAchievements.
func (o *UserAchievement) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chilly_daze\".\"user_achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAchievementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userAchievementR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAchievements: UserAchievementSlice{o},
		}
	} else {
		related.R.UserAchievements = append(related.R.UserAchievements, o)
	}

	return nil
}

// UserAchievements retrieves all the records using an executor.
func UserAchievements(mods ...qm.QueryMod) userAchievementQuery {
	mods = append(mods, qm.From("\"chilly_daze\".\"user_achievements\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chilly_daze\".\"user_achievements\".*"})
	}

	return userAchievementQuery{q}
}

// FindUserAchievement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAchievement(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserAchievement, error) {
	userAchievementObj := &UserAchievement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chilly_daze\".\"user_achievements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userAchievementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from user_achievements")
	}

	if err = userAchievementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userAchievementObj, err
	}

	return userAchievementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAchievement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_achievements provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAchievementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAchievementInsertCacheMut.RLock()
	cache, cached := userAchievementInsertCache[key]
	userAchievementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAchievementAllColumns,
			userAchievementColumnsWithDefault,
			userAchievementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAchievementType, userAchievementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAchievementType, userAchievementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chilly_daze\".\"user_achievements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chilly_daze\".\"user_achievements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into user_achievements")
	}

	if !cached {
		userAchievementInsertCacheMut.Lock()
		userAchievementInsertCache[key] = cache
		userAchievementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserAchievement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAchievement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAchievementUpdateCacheMut.RLock()
	cache, cached := userAchievementUpdateCache[key]
	userAchievementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAchievementAllColumns,
			userAchievementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update user_achievements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chilly_daze\".\"user_achievements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAchievementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAchievementType, userAchievementMapping, append(wl, userAchievementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update user_achievements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for user_achievements")
	}

	if !cached {
		userAchievementUpdateCacheMut.Lock()
		userAchievementUpdateCache[key] = cache
		userAchievementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAchievementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for user_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for user_achievements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAchievementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chilly_daze\".\"user_achievements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAchievementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in userAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all userAchievement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAchievement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_achievements provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAchievementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAchievementUpsertCacheMut.RLock()
	cache, cached := userAchievementUpsertCache[key]
	userAchievementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAchievementAllColumns,
			userAchievementColumnsWithDefault,
			userAchievementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAchievementAllColumns,
			userAchievementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert user_achievements, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAchievementPrimaryKeyColumns))
			copy(conflict, userAchievementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chilly_daze\".\"user_achievements\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAchievementType, userAchievementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAchievementType, userAchievementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert user_achievements")
	}

	if !cached {
		userAchievementUpsertCacheMut.Lock()
		userAchievementUpsertCache[key] = cache
		userAchievementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserAchievement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAchievement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no UserAchievement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAchievementPrimaryKeyMapping)
	sql := "DELETE FROM \"chilly_daze\".\"user_achievements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from user_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for user_achievements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAchievementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no userAchievementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from user_achievements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_achievements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAchievementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAchievementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chilly_daze\".\"user_achievements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAchievementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from userAchievement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_achievements")
	}

	if len(userAchievementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAchievement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAchievement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAchievementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAchievementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAchievementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chilly_daze\".\"user_achievements\".* FROM \"chilly_daze\".\"user_achievements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAchievementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in UserAchievementSlice")
	}

	*o = slice

	return nil
}

// UserAchievementExists checks if the UserAchievement row exists.
func UserAchievementExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chilly_daze\".\"user_achievements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if user_achievements exists")
	}

	return exists, nil
}

// Exists checks if the UserAchievement row exists.
func (o *UserAchievement) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserAchievementExists(ctx, exec, o.ID)
}
