// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TracePoint is an object representing the database table.
type TracePoint struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChillID   string    `boil:"chill_id" json:"chill_id" toml:"chill_id" yaml:"chill_id"`
	Latitude  float64   `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude float64   `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	Timestamp time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`

	R *tracePointR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tracePointL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TracePointColumns = struct {
	ID        string
	ChillID   string
	Latitude  string
	Longitude string
	Timestamp string
}{
	ID:        "id",
	ChillID:   "chill_id",
	Latitude:  "latitude",
	Longitude: "longitude",
	Timestamp: "timestamp",
}

var TracePointTableColumns = struct {
	ID        string
	ChillID   string
	Latitude  string
	Longitude string
	Timestamp string
}{
	ID:        "trace_points.id",
	ChillID:   "trace_points.chill_id",
	Latitude:  "trace_points.latitude",
	Longitude: "trace_points.longitude",
	Timestamp: "trace_points.timestamp",
}

// Generated where

var TracePointWhere = struct {
	ID        whereHelperstring
	ChillID   whereHelperstring
	Latitude  whereHelperfloat64
	Longitude whereHelperfloat64
	Timestamp whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"chilly_daze\".\"trace_points\".\"id\""},
	ChillID:   whereHelperstring{field: "\"chilly_daze\".\"trace_points\".\"chill_id\""},
	Latitude:  whereHelperfloat64{field: "\"chilly_daze\".\"trace_points\".\"latitude\""},
	Longitude: whereHelperfloat64{field: "\"chilly_daze\".\"trace_points\".\"longitude\""},
	Timestamp: whereHelpertime_Time{field: "\"chilly_daze\".\"trace_points\".\"timestamp\""},
}

// TracePointRels is where relationship names are stored.
var TracePointRels = struct {
	Chill string
}{
	Chill: "Chill",
}

// tracePointR is where relationships are stored.
type tracePointR struct {
	Chill *Chill `boil:"Chill" json:"Chill" toml:"Chill" yaml:"Chill"`
}

// NewStruct creates a new relationship struct
func (*tracePointR) NewStruct() *tracePointR {
	return &tracePointR{}
}

func (r *tracePointR) GetChill() *Chill {
	if r == nil {
		return nil
	}
	return r.Chill
}

// tracePointL is where Load methods for each relationship are stored.
type tracePointL struct{}

var (
	tracePointAllColumns            = []string{"id", "chill_id", "latitude", "longitude", "timestamp"}
	tracePointColumnsWithoutDefault = []string{"chill_id", "latitude", "longitude"}
	tracePointColumnsWithDefault    = []string{"id", "timestamp"}
	tracePointPrimaryKeyColumns     = []string{"id"}
	tracePointGeneratedColumns      = []string{}
)

type (
	// TracePointSlice is an alias for a slice of pointers to TracePoint.
	// This should almost always be used instead of []TracePoint.
	TracePointSlice []*TracePoint
	// TracePointHook is the signature for custom TracePoint hook methods
	TracePointHook func(context.Context, boil.ContextExecutor, *TracePoint) error

	tracePointQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tracePointType                 = reflect.TypeOf(&TracePoint{})
	tracePointMapping              = queries.MakeStructMapping(tracePointType)
	tracePointPrimaryKeyMapping, _ = queries.BindMapping(tracePointType, tracePointMapping, tracePointPrimaryKeyColumns)
	tracePointInsertCacheMut       sync.RWMutex
	tracePointInsertCache          = make(map[string]insertCache)
	tracePointUpdateCacheMut       sync.RWMutex
	tracePointUpdateCache          = make(map[string]updateCache)
	tracePointUpsertCacheMut       sync.RWMutex
	tracePointUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tracePointAfterSelectHooks []TracePointHook

var tracePointBeforeInsertHooks []TracePointHook
var tracePointAfterInsertHooks []TracePointHook

var tracePointBeforeUpdateHooks []TracePointHook
var tracePointAfterUpdateHooks []TracePointHook

var tracePointBeforeDeleteHooks []TracePointHook
var tracePointAfterDeleteHooks []TracePointHook

var tracePointBeforeUpsertHooks []TracePointHook
var tracePointAfterUpsertHooks []TracePointHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TracePoint) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TracePoint) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TracePoint) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TracePoint) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TracePoint) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TracePoint) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TracePoint) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TracePoint) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TracePoint) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tracePointAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTracePointHook registers your hook function for all future operations.
func AddTracePointHook(hookPoint boil.HookPoint, tracePointHook TracePointHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tracePointAfterSelectHooks = append(tracePointAfterSelectHooks, tracePointHook)
	case boil.BeforeInsertHook:
		tracePointBeforeInsertHooks = append(tracePointBeforeInsertHooks, tracePointHook)
	case boil.AfterInsertHook:
		tracePointAfterInsertHooks = append(tracePointAfterInsertHooks, tracePointHook)
	case boil.BeforeUpdateHook:
		tracePointBeforeUpdateHooks = append(tracePointBeforeUpdateHooks, tracePointHook)
	case boil.AfterUpdateHook:
		tracePointAfterUpdateHooks = append(tracePointAfterUpdateHooks, tracePointHook)
	case boil.BeforeDeleteHook:
		tracePointBeforeDeleteHooks = append(tracePointBeforeDeleteHooks, tracePointHook)
	case boil.AfterDeleteHook:
		tracePointAfterDeleteHooks = append(tracePointAfterDeleteHooks, tracePointHook)
	case boil.BeforeUpsertHook:
		tracePointBeforeUpsertHooks = append(tracePointBeforeUpsertHooks, tracePointHook)
	case boil.AfterUpsertHook:
		tracePointAfterUpsertHooks = append(tracePointAfterUpsertHooks, tracePointHook)
	}
}

// One returns a single tracePoint record from the query.
func (q tracePointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TracePoint, error) {
	o := &TracePoint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for trace_points")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TracePoint records from the query.
func (q tracePointQuery) All(ctx context.Context, exec boil.ContextExecutor) (TracePointSlice, error) {
	var o []*TracePoint

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to TracePoint slice")
	}

	if len(tracePointAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TracePoint records in the query.
func (q tracePointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count trace_points rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tracePointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if trace_points exists")
	}

	return count > 0, nil
}

// Chill pointed to by the foreign key.
func (o *TracePoint) Chill(mods ...qm.QueryMod) chillQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChillID),
	}

	queryMods = append(queryMods, mods...)

	return Chills(queryMods...)
}

// LoadChill allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tracePointL) LoadChill(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTracePoint interface{}, mods queries.Applicator) error {
	var slice []*TracePoint
	var object *TracePoint

	if singular {
		var ok bool
		object, ok = maybeTracePoint.(*TracePoint)
		if !ok {
			object = new(TracePoint)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTracePoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTracePoint))
			}
		}
	} else {
		s, ok := maybeTracePoint.(*[]*TracePoint)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTracePoint)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTracePoint))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tracePointR{}
		}
		args = append(args, object.ChillID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tracePointR{}
			}

			for _, a := range args {
				if a == obj.ChillID {
					continue Outer
				}
			}

			args = append(args, obj.ChillID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.chills`),
		qm.WhereIn(`chilly_daze.chills.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chill")
	}

	var resultSlice []*Chill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chill")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chills")
	}

	if len(chillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chill = foreign
		if foreign.R == nil {
			foreign.R = &chillR{}
		}
		foreign.R.TracePoints = append(foreign.R.TracePoints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChillID == foreign.ID {
				local.R.Chill = foreign
				if foreign.R == nil {
					foreign.R = &chillR{}
				}
				foreign.R.TracePoints = append(foreign.R.TracePoints, local)
				break
			}
		}
	}

	return nil
}

// SetChill of the tracePoint to the related item.
// Sets o.R.Chill to related.
// Adds o to related.R.TracePoints.
func (o *TracePoint) SetChill(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chill) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chilly_daze\".\"trace_points\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chill_id"}),
		strmangle.WhereClause("\"", "\"", 2, tracePointPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChillID = related.ID
	if o.R == nil {
		o.R = &tracePointR{
			Chill: related,
		}
	} else {
		o.R.Chill = related
	}

	if related.R == nil {
		related.R = &chillR{
			TracePoints: TracePointSlice{o},
		}
	} else {
		related.R.TracePoints = append(related.R.TracePoints, o)
	}

	return nil
}

// TracePoints retrieves all the records using an executor.
func TracePoints(mods ...qm.QueryMod) tracePointQuery {
	mods = append(mods, qm.From("\"chilly_daze\".\"trace_points\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chilly_daze\".\"trace_points\".*"})
	}

	return tracePointQuery{q}
}

// FindTracePoint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTracePoint(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TracePoint, error) {
	tracePointObj := &TracePoint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chilly_daze\".\"trace_points\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tracePointObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from trace_points")
	}

	if err = tracePointObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tracePointObj, err
	}

	return tracePointObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TracePoint) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no trace_points provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tracePointColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tracePointInsertCacheMut.RLock()
	cache, cached := tracePointInsertCache[key]
	tracePointInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tracePointAllColumns,
			tracePointColumnsWithDefault,
			tracePointColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tracePointType, tracePointMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tracePointType, tracePointMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chilly_daze\".\"trace_points\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chilly_daze\".\"trace_points\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into trace_points")
	}

	if !cached {
		tracePointInsertCacheMut.Lock()
		tracePointInsertCache[key] = cache
		tracePointInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TracePoint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TracePoint) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tracePointUpdateCacheMut.RLock()
	cache, cached := tracePointUpdateCache[key]
	tracePointUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tracePointAllColumns,
			tracePointPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update trace_points, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chilly_daze\".\"trace_points\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tracePointPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tracePointType, tracePointMapping, append(wl, tracePointPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update trace_points row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for trace_points")
	}

	if !cached {
		tracePointUpdateCacheMut.Lock()
		tracePointUpdateCache[key] = cache
		tracePointUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tracePointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for trace_points")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for trace_points")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TracePointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tracePointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chilly_daze\".\"trace_points\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tracePointPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in tracePoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all tracePoint")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TracePoint) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no trace_points provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tracePointColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tracePointUpsertCacheMut.RLock()
	cache, cached := tracePointUpsertCache[key]
	tracePointUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tracePointAllColumns,
			tracePointColumnsWithDefault,
			tracePointColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tracePointAllColumns,
			tracePointPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert trace_points, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tracePointPrimaryKeyColumns))
			copy(conflict, tracePointPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chilly_daze\".\"trace_points\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tracePointType, tracePointMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tracePointType, tracePointMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert trace_points")
	}

	if !cached {
		tracePointUpsertCacheMut.Lock()
		tracePointUpsertCache[key] = cache
		tracePointUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TracePoint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TracePoint) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no TracePoint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tracePointPrimaryKeyMapping)
	sql := "DELETE FROM \"chilly_daze\".\"trace_points\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from trace_points")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for trace_points")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tracePointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no tracePointQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from trace_points")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for trace_points")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TracePointSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tracePointBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tracePointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chilly_daze\".\"trace_points\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tracePointPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from tracePoint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for trace_points")
	}

	if len(tracePointAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TracePoint) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTracePoint(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TracePointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TracePointSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tracePointPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chilly_daze\".\"trace_points\".* FROM \"chilly_daze\".\"trace_points\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tracePointPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in TracePointSlice")
	}

	*o = slice

	return nil
}

// TracePointExists checks if the TracePoint row exists.
func TracePointExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chilly_daze\".\"trace_points\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if trace_points exists")
	}

	return exists, nil
}

// Exists checks if the TracePoint row exists.
func (o *TracePoint) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TracePointExists(ctx, exec, o.ID)
}
