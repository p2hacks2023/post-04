// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chill is an object representing the database table.
type Chill struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	EndedAt   null.Time `boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	Distance  float64   `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`

	R *chillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChillColumns = struct {
	ID        string
	UserID    string
	CreatedAt string
	EndedAt   string
	Distance  string
}{
	ID:        "id",
	UserID:    "user_id",
	CreatedAt: "created_at",
	EndedAt:   "ended_at",
	Distance:  "distance",
}

var ChillTableColumns = struct {
	ID        string
	UserID    string
	CreatedAt string
	EndedAt   string
	Distance  string
}{
	ID:        "chills.id",
	UserID:    "chills.user_id",
	CreatedAt: "chills.created_at",
	EndedAt:   "chills.ended_at",
	Distance:  "chills.distance",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ChillWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	CreatedAt whereHelpertime_Time
	EndedAt   whereHelpernull_Time
	Distance  whereHelperfloat64
}{
	ID:        whereHelperstring{field: "\"chilly_daze\".\"chills\".\"id\""},
	UserID:    whereHelperstring{field: "\"chilly_daze\".\"chills\".\"user_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"chilly_daze\".\"chills\".\"created_at\""},
	EndedAt:   whereHelpernull_Time{field: "\"chilly_daze\".\"chills\".\"ended_at\""},
	Distance:  whereHelperfloat64{field: "\"chilly_daze\".\"chills\".\"distance\""},
}

// ChillRels is where relationship names are stored.
var ChillRels = struct {
	User              string
	ChillAchievements string
	Photos            string
	TracePoints       string
}{
	User:              "User",
	ChillAchievements: "ChillAchievements",
	Photos:            "Photos",
	TracePoints:       "TracePoints",
}

// chillR is where relationships are stored.
type chillR struct {
	User              *User                 `boil:"User" json:"User" toml:"User" yaml:"User"`
	ChillAchievements ChillAchievementSlice `boil:"ChillAchievements" json:"ChillAchievements" toml:"ChillAchievements" yaml:"ChillAchievements"`
	Photos            PhotoSlice            `boil:"Photos" json:"Photos" toml:"Photos" yaml:"Photos"`
	TracePoints       TracePointSlice       `boil:"TracePoints" json:"TracePoints" toml:"TracePoints" yaml:"TracePoints"`
}

// NewStruct creates a new relationship struct
func (*chillR) NewStruct() *chillR {
	return &chillR{}
}

func (r *chillR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *chillR) GetChillAchievements() ChillAchievementSlice {
	if r == nil {
		return nil
	}
	return r.ChillAchievements
}

func (r *chillR) GetPhotos() PhotoSlice {
	if r == nil {
		return nil
	}
	return r.Photos
}

func (r *chillR) GetTracePoints() TracePointSlice {
	if r == nil {
		return nil
	}
	return r.TracePoints
}

// chillL is where Load methods for each relationship are stored.
type chillL struct{}

var (
	chillAllColumns            = []string{"id", "user_id", "created_at", "ended_at", "distance"}
	chillColumnsWithoutDefault = []string{"user_id", "distance"}
	chillColumnsWithDefault    = []string{"id", "created_at", "ended_at"}
	chillPrimaryKeyColumns     = []string{"id"}
	chillGeneratedColumns      = []string{}
)

type (
	// ChillSlice is an alias for a slice of pointers to Chill.
	// This should almost always be used instead of []Chill.
	ChillSlice []*Chill
	// ChillHook is the signature for custom Chill hook methods
	ChillHook func(context.Context, boil.ContextExecutor, *Chill) error

	chillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chillType                 = reflect.TypeOf(&Chill{})
	chillMapping              = queries.MakeStructMapping(chillType)
	chillPrimaryKeyMapping, _ = queries.BindMapping(chillType, chillMapping, chillPrimaryKeyColumns)
	chillInsertCacheMut       sync.RWMutex
	chillInsertCache          = make(map[string]insertCache)
	chillUpdateCacheMut       sync.RWMutex
	chillUpdateCache          = make(map[string]updateCache)
	chillUpsertCacheMut       sync.RWMutex
	chillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chillAfterSelectHooks []ChillHook

var chillBeforeInsertHooks []ChillHook
var chillAfterInsertHooks []ChillHook

var chillBeforeUpdateHooks []ChillHook
var chillAfterUpdateHooks []ChillHook

var chillBeforeDeleteHooks []ChillHook
var chillAfterDeleteHooks []ChillHook

var chillBeforeUpsertHooks []ChillHook
var chillAfterUpsertHooks []ChillHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChillHook registers your hook function for all future operations.
func AddChillHook(hookPoint boil.HookPoint, chillHook ChillHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chillAfterSelectHooks = append(chillAfterSelectHooks, chillHook)
	case boil.BeforeInsertHook:
		chillBeforeInsertHooks = append(chillBeforeInsertHooks, chillHook)
	case boil.AfterInsertHook:
		chillAfterInsertHooks = append(chillAfterInsertHooks, chillHook)
	case boil.BeforeUpdateHook:
		chillBeforeUpdateHooks = append(chillBeforeUpdateHooks, chillHook)
	case boil.AfterUpdateHook:
		chillAfterUpdateHooks = append(chillAfterUpdateHooks, chillHook)
	case boil.BeforeDeleteHook:
		chillBeforeDeleteHooks = append(chillBeforeDeleteHooks, chillHook)
	case boil.AfterDeleteHook:
		chillAfterDeleteHooks = append(chillAfterDeleteHooks, chillHook)
	case boil.BeforeUpsertHook:
		chillBeforeUpsertHooks = append(chillBeforeUpsertHooks, chillHook)
	case boil.AfterUpsertHook:
		chillAfterUpsertHooks = append(chillAfterUpsertHooks, chillHook)
	}
}

// One returns a single chill record from the query.
func (q chillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chill, error) {
	o := &Chill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for chills")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chill records from the query.
func (q chillQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChillSlice, error) {
	var o []*Chill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Chill slice")
	}

	if len(chillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chill records in the query.
func (q chillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count chills rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if chills exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Chill) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ChillAchievements retrieves all the chill_achievement's ChillAchievements with an executor.
func (o *Chill) ChillAchievements(mods ...qm.QueryMod) chillAchievementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"chill_achievements\".\"chill_id\"=?", o.ID),
	)

	return ChillAchievements(queryMods...)
}

// Photos retrieves all the photo's Photos with an executor.
func (o *Chill) Photos(mods ...qm.QueryMod) photoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"photos\".\"chill_id\"=?", o.ID),
	)

	return Photos(queryMods...)
}

// TracePoints retrieves all the trace_point's TracePoints with an executor.
func (o *Chill) TracePoints(mods ...qm.QueryMod) tracePointQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"trace_points\".\"chill_id\"=?", o.ID),
	)

	return TracePoints(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chillL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChill interface{}, mods queries.Applicator) error {
	var slice []*Chill
	var object *Chill

	if singular {
		var ok bool
		object, ok = maybeChill.(*Chill)
		if !ok {
			object = new(Chill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChill))
			}
		}
	} else {
		s, ok := maybeChill.(*[]*Chill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChill))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chillR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chillR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.users`),
		qm.WhereIn(`chilly_daze.users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Chills = append(foreign.R.Chills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Chills = append(foreign.R.Chills, local)
				break
			}
		}
	}

	return nil
}

// LoadChillAchievements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chillL) LoadChillAchievements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChill interface{}, mods queries.Applicator) error {
	var slice []*Chill
	var object *Chill

	if singular {
		var ok bool
		object, ok = maybeChill.(*Chill)
		if !ok {
			object = new(Chill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChill))
			}
		}
	} else {
		s, ok := maybeChill.(*[]*Chill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChill))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chillR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chillR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.chill_achievements`),
		qm.WhereIn(`chilly_daze.chill_achievements.chill_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chill_achievements")
	}

	var resultSlice []*ChillAchievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chill_achievements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chill_achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chill_achievements")
	}

	if len(chillAchievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChillAchievements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chillAchievementR{}
			}
			foreign.R.Chill = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChillID {
				local.R.ChillAchievements = append(local.R.ChillAchievements, foreign)
				if foreign.R == nil {
					foreign.R = &chillAchievementR{}
				}
				foreign.R.Chill = local
				break
			}
		}
	}

	return nil
}

// LoadPhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chillL) LoadPhotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChill interface{}, mods queries.Applicator) error {
	var slice []*Chill
	var object *Chill

	if singular {
		var ok bool
		object, ok = maybeChill.(*Chill)
		if !ok {
			object = new(Chill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChill))
			}
		}
	} else {
		s, ok := maybeChill.(*[]*Chill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChill))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chillR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chillR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.photos`),
		qm.WhereIn(`chilly_daze.photos.chill_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load photos")
	}

	var resultSlice []*Photo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for photos")
	}

	if len(photoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Photos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &photoR{}
			}
			foreign.R.Chill = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChillID {
				local.R.Photos = append(local.R.Photos, foreign)
				if foreign.R == nil {
					foreign.R = &photoR{}
				}
				foreign.R.Chill = local
				break
			}
		}
	}

	return nil
}

// LoadTracePoints allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chillL) LoadTracePoints(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChill interface{}, mods queries.Applicator) error {
	var slice []*Chill
	var object *Chill

	if singular {
		var ok bool
		object, ok = maybeChill.(*Chill)
		if !ok {
			object = new(Chill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChill))
			}
		}
	} else {
		s, ok := maybeChill.(*[]*Chill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChill))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chillR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chillR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.trace_points`),
		qm.WhereIn(`chilly_daze.trace_points.chill_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trace_points")
	}

	var resultSlice []*TracePoint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trace_points")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on trace_points")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for trace_points")
	}

	if len(tracePointAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TracePoints = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tracePointR{}
			}
			foreign.R.Chill = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChillID {
				local.R.TracePoints = append(local.R.TracePoints, foreign)
				if foreign.R == nil {
					foreign.R = &tracePointR{}
				}
				foreign.R.Chill = local
				break
			}
		}
	}

	return nil
}

// SetUser of the chill to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Chills.
func (o *Chill) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chilly_daze\".\"chills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, chillPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &chillR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Chills: ChillSlice{o},
		}
	} else {
		related.R.Chills = append(related.R.Chills, o)
	}

	return nil
}

// AddChillAchievements adds the given related objects to the existing relationships
// of the chill, optionally inserting them as new records.
// Appends related to o.R.ChillAchievements.
// Sets related.R.Chill appropriately.
func (o *Chill) AddChillAchievements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChillAchievement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChillID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"chill_achievements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chill_id"}),
				strmangle.WhereClause("\"", "\"", 2, chillAchievementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChillID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chillR{
			ChillAchievements: related,
		}
	} else {
		o.R.ChillAchievements = append(o.R.ChillAchievements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chillAchievementR{
				Chill: o,
			}
		} else {
			rel.R.Chill = o
		}
	}
	return nil
}

// AddPhotos adds the given related objects to the existing relationships
// of the chill, optionally inserting them as new records.
// Appends related to o.R.Photos.
// Sets related.R.Chill appropriately.
func (o *Chill) AddPhotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Photo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChillID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"photos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chill_id"}),
				strmangle.WhereClause("\"", "\"", 2, photoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChillID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chillR{
			Photos: related,
		}
	} else {
		o.R.Photos = append(o.R.Photos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &photoR{
				Chill: o,
			}
		} else {
			rel.R.Chill = o
		}
	}
	return nil
}

// AddTracePoints adds the given related objects to the existing relationships
// of the chill, optionally inserting them as new records.
// Appends related to o.R.TracePoints.
// Sets related.R.Chill appropriately.
func (o *Chill) AddTracePoints(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TracePoint) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChillID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"trace_points\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chill_id"}),
				strmangle.WhereClause("\"", "\"", 2, tracePointPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChillID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chillR{
			TracePoints: related,
		}
	} else {
		o.R.TracePoints = append(o.R.TracePoints, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tracePointR{
				Chill: o,
			}
		} else {
			rel.R.Chill = o
		}
	}
	return nil
}

// Chills retrieves all the records using an executor.
func Chills(mods ...qm.QueryMod) chillQuery {
	mods = append(mods, qm.From("\"chilly_daze\".\"chills\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chilly_daze\".\"chills\".*"})
	}

	return chillQuery{q}
}

// FindChill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChill(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Chill, error) {
	chillObj := &Chill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chilly_daze\".\"chills\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chillObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from chills")
	}

	if err = chillObj.doAfterSelectHooks(ctx, exec); err != nil {
		return chillObj, err
	}

	return chillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no chills provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chillInsertCacheMut.RLock()
	cache, cached := chillInsertCache[key]
	chillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chillAllColumns,
			chillColumnsWithDefault,
			chillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chillType, chillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chillType, chillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chilly_daze\".\"chills\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chilly_daze\".\"chills\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into chills")
	}

	if !cached {
		chillInsertCacheMut.Lock()
		chillInsertCache[key] = cache
		chillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Chill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chillUpdateCacheMut.RLock()
	cache, cached := chillUpdateCache[key]
	chillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chillAllColumns,
			chillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update chills, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chilly_daze\".\"chills\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chillType, chillMapping, append(wl, chillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update chills row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for chills")
	}

	if !cached {
		chillUpdateCacheMut.Lock()
		chillUpdateCache[key] = cache
		chillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for chills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for chills")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chilly_daze\".\"chills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chillPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in chill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all chill")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no chills provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chillColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chillUpsertCacheMut.RLock()
	cache, cached := chillUpsertCache[key]
	chillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chillAllColumns,
			chillColumnsWithDefault,
			chillColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chillAllColumns,
			chillPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert chills, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chillPrimaryKeyColumns))
			copy(conflict, chillPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chilly_daze\".\"chills\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chillType, chillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chillType, chillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert chills")
	}

	if !cached {
		chillUpsertCacheMut.Lock()
		chillUpsertCache[key] = cache
		chillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Chill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Chill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chillPrimaryKeyMapping)
	sql := "DELETE FROM \"chilly_daze\".\"chills\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from chills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for chills")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no chillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from chills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for chills")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chilly_daze\".\"chills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chillPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from chill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for chills")
	}

	if len(chillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChill(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chilly_daze\".\"chills\".* FROM \"chilly_daze\".\"chills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ChillSlice")
	}

	*o = slice

	return nil
}

// ChillExists checks if the Chill row exists.
func ChillExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chilly_daze\".\"chills\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if chills exists")
	}

	return exists, nil
}

// Exists checks if the Chill row exists.
func (o *Chill) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChillExists(ctx, exec, o.ID)
}
