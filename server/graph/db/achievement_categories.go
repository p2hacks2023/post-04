// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AchievementCategory is an object representing the database table.
type AchievementCategory struct {
	ID          string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string `boil:"name" json:"name" toml:"name" yaml:"name"`
	DisplayName string `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`

	R *achievementCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L achievementCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AchievementCategoryColumns = struct {
	ID          string
	Name        string
	DisplayName string
}{
	ID:          "id",
	Name:        "name",
	DisplayName: "display_name",
}

var AchievementCategoryTableColumns = struct {
	ID          string
	Name        string
	DisplayName string
}{
	ID:          "achievement_categories.id",
	Name:        "achievement_categories.name",
	DisplayName: "achievement_categories.display_name",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AchievementCategoryWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	DisplayName whereHelperstring
}{
	ID:          whereHelperstring{field: "\"chilly_daze\".\"achievement_categories\".\"id\""},
	Name:        whereHelperstring{field: "\"chilly_daze\".\"achievement_categories\".\"name\""},
	DisplayName: whereHelperstring{field: "\"chilly_daze\".\"achievement_categories\".\"display_name\""},
}

// AchievementCategoryRels is where relationship names are stored.
var AchievementCategoryRels = struct {
	CategoryAchievements string
}{
	CategoryAchievements: "CategoryAchievements",
}

// achievementCategoryR is where relationships are stored.
type achievementCategoryR struct {
	CategoryAchievements AchievementSlice `boil:"CategoryAchievements" json:"CategoryAchievements" toml:"CategoryAchievements" yaml:"CategoryAchievements"`
}

// NewStruct creates a new relationship struct
func (*achievementCategoryR) NewStruct() *achievementCategoryR {
	return &achievementCategoryR{}
}

func (r *achievementCategoryR) GetCategoryAchievements() AchievementSlice {
	if r == nil {
		return nil
	}
	return r.CategoryAchievements
}

// achievementCategoryL is where Load methods for each relationship are stored.
type achievementCategoryL struct{}

var (
	achievementCategoryAllColumns            = []string{"id", "name", "display_name"}
	achievementCategoryColumnsWithoutDefault = []string{"name", "display_name"}
	achievementCategoryColumnsWithDefault    = []string{"id"}
	achievementCategoryPrimaryKeyColumns     = []string{"id"}
	achievementCategoryGeneratedColumns      = []string{}
)

type (
	// AchievementCategorySlice is an alias for a slice of pointers to AchievementCategory.
	// This should almost always be used instead of []AchievementCategory.
	AchievementCategorySlice []*AchievementCategory
	// AchievementCategoryHook is the signature for custom AchievementCategory hook methods
	AchievementCategoryHook func(context.Context, boil.ContextExecutor, *AchievementCategory) error

	achievementCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	achievementCategoryType                 = reflect.TypeOf(&AchievementCategory{})
	achievementCategoryMapping              = queries.MakeStructMapping(achievementCategoryType)
	achievementCategoryPrimaryKeyMapping, _ = queries.BindMapping(achievementCategoryType, achievementCategoryMapping, achievementCategoryPrimaryKeyColumns)
	achievementCategoryInsertCacheMut       sync.RWMutex
	achievementCategoryInsertCache          = make(map[string]insertCache)
	achievementCategoryUpdateCacheMut       sync.RWMutex
	achievementCategoryUpdateCache          = make(map[string]updateCache)
	achievementCategoryUpsertCacheMut       sync.RWMutex
	achievementCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var achievementCategoryAfterSelectHooks []AchievementCategoryHook

var achievementCategoryBeforeInsertHooks []AchievementCategoryHook
var achievementCategoryAfterInsertHooks []AchievementCategoryHook

var achievementCategoryBeforeUpdateHooks []AchievementCategoryHook
var achievementCategoryAfterUpdateHooks []AchievementCategoryHook

var achievementCategoryBeforeDeleteHooks []AchievementCategoryHook
var achievementCategoryAfterDeleteHooks []AchievementCategoryHook

var achievementCategoryBeforeUpsertHooks []AchievementCategoryHook
var achievementCategoryAfterUpsertHooks []AchievementCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AchievementCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AchievementCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AchievementCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AchievementCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AchievementCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AchievementCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AchievementCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AchievementCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AchievementCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range achievementCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAchievementCategoryHook registers your hook function for all future operations.
func AddAchievementCategoryHook(hookPoint boil.HookPoint, achievementCategoryHook AchievementCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		achievementCategoryAfterSelectHooks = append(achievementCategoryAfterSelectHooks, achievementCategoryHook)
	case boil.BeforeInsertHook:
		achievementCategoryBeforeInsertHooks = append(achievementCategoryBeforeInsertHooks, achievementCategoryHook)
	case boil.AfterInsertHook:
		achievementCategoryAfterInsertHooks = append(achievementCategoryAfterInsertHooks, achievementCategoryHook)
	case boil.BeforeUpdateHook:
		achievementCategoryBeforeUpdateHooks = append(achievementCategoryBeforeUpdateHooks, achievementCategoryHook)
	case boil.AfterUpdateHook:
		achievementCategoryAfterUpdateHooks = append(achievementCategoryAfterUpdateHooks, achievementCategoryHook)
	case boil.BeforeDeleteHook:
		achievementCategoryBeforeDeleteHooks = append(achievementCategoryBeforeDeleteHooks, achievementCategoryHook)
	case boil.AfterDeleteHook:
		achievementCategoryAfterDeleteHooks = append(achievementCategoryAfterDeleteHooks, achievementCategoryHook)
	case boil.BeforeUpsertHook:
		achievementCategoryBeforeUpsertHooks = append(achievementCategoryBeforeUpsertHooks, achievementCategoryHook)
	case boil.AfterUpsertHook:
		achievementCategoryAfterUpsertHooks = append(achievementCategoryAfterUpsertHooks, achievementCategoryHook)
	}
}

// One returns a single achievementCategory record from the query.
func (q achievementCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AchievementCategory, error) {
	o := &AchievementCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for achievement_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AchievementCategory records from the query.
func (q achievementCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (AchievementCategorySlice, error) {
	var o []*AchievementCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to AchievementCategory slice")
	}

	if len(achievementCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AchievementCategory records in the query.
func (q achievementCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count achievement_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q achievementCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if achievement_categories exists")
	}

	return count > 0, nil
}

// CategoryAchievements retrieves all the achievement's Achievements with an executor via category_id column.
func (o *AchievementCategory) CategoryAchievements(mods ...qm.QueryMod) achievementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chilly_daze\".\"achievements\".\"category_id\"=?", o.ID),
	)

	return Achievements(queryMods...)
}

// LoadCategoryAchievements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (achievementCategoryL) LoadCategoryAchievements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAchievementCategory interface{}, mods queries.Applicator) error {
	var slice []*AchievementCategory
	var object *AchievementCategory

	if singular {
		var ok bool
		object, ok = maybeAchievementCategory.(*AchievementCategory)
		if !ok {
			object = new(AchievementCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAchievementCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAchievementCategory))
			}
		}
	} else {
		s, ok := maybeAchievementCategory.(*[]*AchievementCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAchievementCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAchievementCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &achievementCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &achievementCategoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chilly_daze.achievements`),
		qm.WhereIn(`chilly_daze.achievements.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load achievements")
	}

	var resultSlice []*Achievement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice achievements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on achievements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for achievements")
	}

	if len(achievementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryAchievements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &achievementR{}
			}
			foreign.R.Category = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CategoryID {
				local.R.CategoryAchievements = append(local.R.CategoryAchievements, foreign)
				if foreign.R == nil {
					foreign.R = &achievementR{}
				}
				foreign.R.Category = local
				break
			}
		}
	}

	return nil
}

// AddCategoryAchievements adds the given related objects to the existing relationships
// of the achievement_category, optionally inserting them as new records.
// Appends related to o.R.CategoryAchievements.
// Sets related.R.Category appropriately.
func (o *AchievementCategory) AddCategoryAchievements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Achievement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chilly_daze\".\"achievements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
				strmangle.WhereClause("\"", "\"", 2, achievementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &achievementCategoryR{
			CategoryAchievements: related,
		}
	} else {
		o.R.CategoryAchievements = append(o.R.CategoryAchievements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &achievementR{
				Category: o,
			}
		} else {
			rel.R.Category = o
		}
	}
	return nil
}

// AchievementCategories retrieves all the records using an executor.
func AchievementCategories(mods ...qm.QueryMod) achievementCategoryQuery {
	mods = append(mods, qm.From("\"chilly_daze\".\"achievement_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"chilly_daze\".\"achievement_categories\".*"})
	}

	return achievementCategoryQuery{q}
}

// FindAchievementCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAchievementCategory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AchievementCategory, error) {
	achievementCategoryObj := &AchievementCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chilly_daze\".\"achievement_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, achievementCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from achievement_categories")
	}

	if err = achievementCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return achievementCategoryObj, err
	}

	return achievementCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AchievementCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no achievement_categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(achievementCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	achievementCategoryInsertCacheMut.RLock()
	cache, cached := achievementCategoryInsertCache[key]
	achievementCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			achievementCategoryAllColumns,
			achievementCategoryColumnsWithDefault,
			achievementCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(achievementCategoryType, achievementCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(achievementCategoryType, achievementCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chilly_daze\".\"achievement_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chilly_daze\".\"achievement_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into achievement_categories")
	}

	if !cached {
		achievementCategoryInsertCacheMut.Lock()
		achievementCategoryInsertCache[key] = cache
		achievementCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AchievementCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AchievementCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	achievementCategoryUpdateCacheMut.RLock()
	cache, cached := achievementCategoryUpdateCache[key]
	achievementCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			achievementCategoryAllColumns,
			achievementCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update achievement_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chilly_daze\".\"achievement_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, achievementCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(achievementCategoryType, achievementCategoryMapping, append(wl, achievementCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update achievement_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for achievement_categories")
	}

	if !cached {
		achievementCategoryUpdateCacheMut.Lock()
		achievementCategoryUpdateCache[key] = cache
		achievementCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q achievementCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for achievement_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for achievement_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AchievementCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chilly_daze\".\"achievement_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, achievementCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in achievementCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all achievementCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AchievementCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no achievement_categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(achievementCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	achievementCategoryUpsertCacheMut.RLock()
	cache, cached := achievementCategoryUpsertCache[key]
	achievementCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			achievementCategoryAllColumns,
			achievementCategoryColumnsWithDefault,
			achievementCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			achievementCategoryAllColumns,
			achievementCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert achievement_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(achievementCategoryPrimaryKeyColumns))
			copy(conflict, achievementCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chilly_daze\".\"achievement_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(achievementCategoryType, achievementCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(achievementCategoryType, achievementCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert achievement_categories")
	}

	if !cached {
		achievementCategoryUpsertCacheMut.Lock()
		achievementCategoryUpsertCache[key] = cache
		achievementCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AchievementCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AchievementCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no AchievementCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), achievementCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"chilly_daze\".\"achievement_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from achievement_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for achievement_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q achievementCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no achievementCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from achievement_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for achievement_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AchievementCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(achievementCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chilly_daze\".\"achievement_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, achievementCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from achievementCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for achievement_categories")
	}

	if len(achievementCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AchievementCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAchievementCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AchievementCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AchievementCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), achievementCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chilly_daze\".\"achievement_categories\".* FROM \"chilly_daze\".\"achievement_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, achievementCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in AchievementCategorySlice")
	}

	*o = slice

	return nil
}

// AchievementCategoryExists checks if the AchievementCategory row exists.
func AchievementCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chilly_daze\".\"achievement_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if achievement_categories exists")
	}

	return exists, nil
}

// Exists checks if the AchievementCategory row exists.
func (o *AchievementCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AchievementCategoryExists(ctx, exec, o.ID)
}
